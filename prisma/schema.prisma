generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// Usuários da plataforma
// =============================
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(STUDENT) // ADMIN ou STUDENT
  country     String?
  city        String?
  profession  String?
  phone       String?
  birthDate   DateTime?
  profilePic  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchases    Purchase[]
  progresses   Progress[]
  certificates Certificate[]
  comments     Comment[]
}

// =============================
// Enum de papéis de usuário
// =============================
enum Role {
  ADMIN
  STUDENT
}

// =============================
// Cursos disponíveis na plataforma
// =============================
model Course {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  price         Float
  thumbnailUrl  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  instructor    String
  category      String
  rating        Float     @default(0)
  studentsCount Int       @default(0)
  deactivatedIn DateTime?

  // Relacionamentos
  modules      Module[]
  purchases    Purchase[]
  progresses   Progress[]
  certificates Certificate[]
}

// =============================
// Módulos (agrupam aulas dentro de um curso)
// =============================
model Module {
  id       Int    @id @default(autoincrement())
  title    String
  order    Int // ordem do módulo no curso
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  lessons Lesson[]
}

// =============================
// Aulas dentro de um módulo
// =============================
model Lesson {
  id       Int       @id @default(autoincrement())
  title    String
  videoUrl String // link do vídeo (Vimeo, YouTube ou storage próprio)
  pdfUrl   String? // material complementar
  order    Int
  moduleId Int
  module   Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  comments Comment[]
}

// =============================
// Registro de compras
// =============================
model Purchase {
  id        Int           @id @default(autoincrement())
  userId    Int
  courseId  Int
  pricePaid Float
  paymentId String? // ID do gateway de pagamento (Stripe, etc.)
  status    PaymentStatus @default(PAID)
  createdAt DateTime      @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

// =============================
// Enum de status de pagamento
// =============================
enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

// =============================
// Progresso do aluno no curso
// =============================
model Progress {
  id                 Int      @id @default(autoincrement())
  userId             Int
  courseId           Int
  completedLessonIds Int[]    @default([])
  totalLessons       Int
  updatedAt          DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

// =============================
// Certificados emitidos
// =============================
model Certificate {
  id       Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  issuedAt DateTime @default(now())
  token    String   @unique

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

// =============================
// Comentários nas aulas
// =============================
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId   Int
  lessonId Int
  parentId Int? // se for resposta a outro comentário

  user    User      @relation(fields: [userId], references: [id])
  lesson  Lesson    @relation(fields: [lessonId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
}
